suite: TLS secret
templates:
  - tls-secret.yaml
set:
  tls:
    cert: "my-tls-cert"
    key: "my-tls-key"
    ca: "my-ca-cert"
tests:
  - it: should not render when `existingSecret` is provided
    set:
      tls:
        existingSecret: "my-tls-secret"
    asserts:
      # Empty document
      - notExists:
          path: kind
  - it: should use provided certificates when `autoGenerated` is false
    set:
      tls:
        autoGenerated: false
    asserts:
      - equal:
          path: metadata.name
          value: RELEASE-NAME-kubernetes-access-gateway-tls
      - equal:
          path: data
          value:
            tls.crt: bXktdGxzLWNlcnQ=
            tls.key: bXktdGxzLWtleQ==
            ca.crt: bXktY2EtY2VydA==
  - it: should generate TLS and CA certificates when `autoGenerated` is true
    set:
      tls:
        autoGenerated: true
    asserts:
      - equal:
          path: metadata.name
          value: RELEASE-NAME-kubernetes-access-gateway-tls
      - matchRegex:
          path: "data['tls.crt']"
          pattern: "^([A-Za-z0-9+/=]{20,})$"
      - matchRegex:
          path: "data['tls.key']"
          pattern: "^([A-Za-z0-9+/=]{20,})$"
      - matchRegex:
          path: "data['ca.crt']"
          pattern: "^([A-Za-z0-9+/=]{20,})$"
  - it: should not re-generate certificates when `autoGenerated` is true and the alternative names have not changed
    set:
      tls:
        autoGenerated: true
    kubernetesProvider:
      # Mock previously generated secret
      scheme:
        "v1/Secret":
          gvr:
            version: "v1"
            resource: "secrets"
          namespaced: true
      objects:
        - kind: Secret
          apiVersion: v1
          type: kubernetes.io/tls
          metadata:
            name: RELEASE-NAME-kubernetes-access-gateway-tls
            namespace: NAMESPACE
            annotations:
              # sha256 hash of "[]-[]-" (no custom DNS names or resource alias is provided)
              checksum/alternativeNames: eee78e4712e57977935ceb9ebfdb354aa33c85ca4dbb490001827f64259b6b8d
          data:
            tls.crt: generated-cert
            tls.key: generated-key
            ca.crt: generated-ca
    asserts:
      - equal:
          path: metadata.name
          value: RELEASE-NAME-kubernetes-access-gateway-tls
      - equal:
          path: metadata.annotations
          value:
            # sha256 hash of "[]-[]-" (no custom DNS names or resource alias is provided)
            checksum/alternativeNames: eee78e4712e57977935ceb9ebfdb354aa33c85ca4dbb490001827f64259b6b8d
      - equal:
          path: data
          value:
            tls.crt: generated-cert
            tls.key: generated-key
            ca.crt: generated-ca
  - it: should re-generate certificates when `autoGenerated` is true but the alternative names have changed
    set:
      tls:
        autoGenerated: true
        dnsNames:
          - my-cluster.int
    kubernetesProvider:
      # Mock previously generated secret
      scheme:
        "v1/Secret":
          gvr:
            version: "v1"
            resource: "secrets"
          namespaced: true
      objects:
        - kind: Secret
          apiVersion: v1
          type: kubernetes.io/tls
          metadata:
            name: RELEASE-NAME-kubernetes-access-gateway-tls
            namespace: NAMESPACE
            annotations:
              # sha256 hash of "[]-[]-" (no custom DNS names or resource alias is provided)
              checksum/alternativeNames: eee78e4712e57977935ceb9ebfdb354aa33c85ca4dbb490001827f64259b6b8d
          data:
            tls.crt: generated-cert
            tls.key: generated-key
            ca.crt: generated-ca
    asserts:
      - equal:
          path: metadata.name
          value: RELEASE-NAME-kubernetes-access-gateway-tls
      - equal:
          path: metadata.annotations
          value:
            # sha256 hash of "[]-[my-cluster.int]-" (a custom DNS name is provided)
            checksum/alternativeNames: fd97b5b8e975253c40e6a8e5702abb9394e3b181d3b47873558d64fdaf8346fa
      - matchRegex:
          path: "data['tls.crt']"
          pattern: "^([A-Za-z0-9+/=]{20,})$"
      - matchRegex:
          path: "data['tls.key']"
          pattern: "^([A-Za-z0-9+/=]{20,})$"
      - matchRegex:
          path: "data['ca.crt']"
          pattern: "^([A-Za-z0-9+/=]{20,})$"
  - it: should re-generate certificates when `autoGenerated` is true but the resource alias has changed
    set:
      twingate:
        resource:
          enabled: true
          extraAnnotations:
            resource.twingate.com/alias: new-alias.int
      tls:
        autoGenerated: true
    kubernetesProvider:
      # Mock previously generated secret
      scheme:
        "v1/Secret":
          gvr:
            version: "v1"
            resource: "secrets"
          namespaced: true
      objects:
        - kind: Secret
          apiVersion: v1
          type: kubernetes.io/tls
          metadata:
            name: RELEASE-NAME-kubernetes-access-gateway-tls
            namespace: NAMESPACE
            annotations:
              # sha256 hash of "[]-[]-old-alias.int" (no custom DNS names or resource alias is provided)
              checksum/alternativeNames: 47c527febb8c858e4535dffa69c3c5b2921137e15f40eb66721be10d4c93121d
          data:
            tls.crt: generated-cert
            tls.key: generated-key
            ca.crt: generated-ca
    asserts:
      - equal:
          path: metadata.name
          value: RELEASE-NAME-kubernetes-access-gateway-tls
      - equal:
          path: metadata.annotations
          value:
            # sha256 hash of "[]-[]-new-alias.int" (a custom DNS name is provided)
            checksum/alternativeNames: 92aa860fe6d6fdc9d6e5d0f3f5d814a847f64e73722b663341e16b3f030e905f
      - matchRegex:
          path: "data['tls.crt']"
          pattern: "^([A-Za-z0-9+/=]{20,})$"
      - matchRegex:
          path: "data['tls.key']"
          pattern: "^([A-Za-z0-9+/=]{20,})$"
      - matchRegex:
          path: "data['ca.crt']"
          pattern: "^([A-Za-z0-9+/=]{20,})$"
