suite: NOTES
templates:
  - NOTES.txt
tests:
  - it: should show ClusterIP instructions when service type is ClusterIP
    set:
      tls:
        autoGenerated: false
        ca: |
          -----BEGIN CERTIFICATE-----
          MIIDIDCCAgigAwIBAgIRANR3YBydhgMaFH4HzGiKyOEwDQYJKoZIhvcNAQELBQAw
          GjEYMBYGA1UEAxMPcHAtcGFtLXByb3h5LWNhMB4XDTI1MDQyMTE2NDY1NFoXDTI2
          MDQyMTE2NDY1NFowGjEYMBYGA1UEAxMPcHAtcGFtLXByb3h5LWNhMIIBIjANBgkq
          hkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA96wp/MyDujuM/bNLChJ06F5irGUBKfBY
          yR17uGnpYW6PqiAB6gbn1O1pb5p4ey6w6HfSY6YzVnkq4JzWH3y5KnHsL3EuAh3m
          heqX2nRk0HPQM3oCnS4AUxz2DEaug2u45tcmoDVnRx45VfeVEvDz9gT0Tr9qJNUO
          p1Tb0+bKFVdoOTXTiJKcpMBLXKzslkr1R6+dEhpgb0RtEBfb7E6530Bx4oBbYj31
          sfTlLiHrGvwpOFiv5rjBzOjeyF4XU4yFAwvHKPpJ+VBq9iECVyOCKUv4HQV1x6xS
          twKG+bRWlsxPgS/5esu2SD3p6yNKL/vIod6gV2u8DTiR25gHyCEDYQIDAQABo2Ew
          XzAOBgNVHQ8BAf8EBAMCAqQwHQYDVR0lBBYwFAYIKwYBBQUHAwEGCCsGAQUFBwMC
          MA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFMu6hvsUoH9UmB5q4qbC46q3LdLu
          MA0GCSqGSIb3DQEBCwUAA4IBAQAgv32hCwyOHS9veQlV7/z7SwhIKCtNbpgVAnmR
          CP7iDlmMOf379KqxWey+/utxaAT6sjIhiNmrFwHNoUWjj9Bv6U0oWC1XDxzpfABT
          IfHtpLuH3xLa98S6F8Ez2TZp6Hyd7/pxQImBIwIgenOrAy6cuRSRjQtXYq3o/0Wx
          M8C/gZSvCg5622coUWHnuaVdn/3bJ/P/IkmYmX2sN66BR3i70BO/kxeGlQMlqiqI
          fLRk3a/Kh/4vpIdcfI38Xb+iwfjRvCVEQAkf8efDzIfzL8yj5Mk+E5OsfMD80YuZ
          khGd00QOCDRCpVisdRQmbzFv6JkeYKxhWzaulPHgl1JRzWaI
          -----END CERTIFICATE-----
      service:
        type: ClusterIP
    asserts:
      - matchSnapshot: {}
  - it: should show LoadBalancer instructions when service type is LoadBalancer
    set:
      tls:
        autoGenerated: false
        ca: |
          -----BEGIN CERTIFICATE-----
          MIIDIDCCAgigAwIBAgIRANR3YBydhgMaFH4HzGiKyOEwDQYJKoZIhvcNAQELBQAw
          GjEYMBYGA1UEAxMPcHAtcGFtLXByb3h5LWNhMB4XDTI1MDQyMTE2NDY1NFoXDTI2
          MDQyMTE2NDY1NFowGjEYMBYGA1UEAxMPcHAtcGFtLXByb3h5LWNhMIIBIjANBgkq
          hkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA96wp/MyDujuM/bNLChJ06F5irGUBKfBY
          yR17uGnpYW6PqiAB6gbn1O1pb5p4ey6w6HfSY6YzVnkq4JzWH3y5KnHsL3EuAh3m
          heqX2nRk0HPQM3oCnS4AUxz2DEaug2u45tcmoDVnRx45VfeVEvDz9gT0Tr9qJNUO
          p1Tb0+bKFVdoOTXTiJKcpMBLXKzslkr1R6+dEhpgb0RtEBfb7E6530Bx4oBbYj31
          sfTlLiHrGvwpOFiv5rjBzOjeyF4XU4yFAwvHKPpJ+VBq9iECVyOCKUv4HQV1x6xS
          twKG+bRWlsxPgS/5esu2SD3p6yNKL/vIod6gV2u8DTiR25gHyCEDYQIDAQABo2Ew
          XzAOBgNVHQ8BAf8EBAMCAqQwHQYDVR0lBBYwFAYIKwYBBQUHAwEGCCsGAQUFBwMC
          MA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFMu6hvsUoH9UmB5q4qbC46q3LdLu
          MA0GCSqGSIb3DQEBCwUAA4IBAQAgv32hCwyOHS9veQlV7/z7SwhIKCtNbpgVAnmR
          CP7iDlmMOf379KqxWey+/utxaAT6sjIhiNmrFwHNoUWjj9Bv6U0oWC1XDxzpfABT
          IfHtpLuH3xLa98S6F8Ez2TZp6Hyd7/pxQImBIwIgenOrAy6cuRSRjQtXYq3o/0Wx
          M8C/gZSvCg5622coUWHnuaVdn/3bJ/P/IkmYmX2sN66BR3i70BO/kxeGlQMlqiqI
          fLRk3a/Kh/4vpIdcfI38Xb+iwfjRvCVEQAkf8efDzIfzL8yj5Mk+E5OsfMD80YuZ
          khGd00QOCDRCpVisdRQmbzFv6JkeYKxhWzaulPHgl1JRzWaI
          -----END CERTIFICATE-----
      service:
        type: LoadBalancer
    asserts:
      - matchSnapshot: {}
  - it: should use `existingSecret` Secret object when provided
    set:
      tls:
        existingSecret: my-custom-secret
    kubernetesProvider:
      # Mock existing secret
      scheme:
        "v1/Secret":
          gvr:
            version: "v1"
            resource: "secrets"
          namespaced: true
      objects:
        - kind: Secret
          apiVersion: v1
          type: kubernetes.io/tls
          metadata:
            name: my-custom-secret
            namespace: NAMESPACE
          data:
            ca.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURJRENDQWdpZ0F3SUJBZ0lSQU5SM1lCeWRoZ01hRkg0SHpHaUt5T0V3RFFZSktvWklodmNOQVFFTEJRQXcKR2pFWU1CWUdBMVVFQXhNUGNIQXRjR0Z0TFhCeWIzaDVMV05oTUI0WERUSTFNRFF5TVRFMk5EWTFORm9YRFRJMgpNRFF5TVRFMk5EWTFORm93R2pFWU1CWUdBMVVFQXhNUGNIQXRjR0Z0TFhCeWIzaDVMV05oTUlJQklqQU5CZ2txCmhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBOTZ3cC9NeUR1anVNL2JOTENoSjA2RjVpckdVQktmQlkKeVIxN3VHbnBZVzZQcWlBQjZnYm4xTzFwYjVwNGV5Nnc2SGZTWTZZelZua3E0SnpXSDN5NUtuSHNMM0V1QWgzbQpoZXFYMm5SazBIUFFNM29DblM0QVV4ejJERWF1ZzJ1NDV0Y21vRFZuUng0NVZmZVZFdkR6OWdUMFRyOXFKTlVPCnAxVGIwK2JLRlZkb09UWFRpSktjcE1CTFhLenNsa3IxUjYrZEVocGdiMFJ0RUJmYjdFNjUzMEJ4NG9CYllqMzEKc2ZUbExpSHJHdndwT0ZpdjVyakJ6T2pleUY0WFU0eUZBd3ZIS1BwSitWQnE5aUVDVnlPQ0tVdjRIUVYxeDZ4Uwp0d0tHK2JSV2xzeFBnUy81ZXN1MlNEM3A2eU5LTC92SW9kNmdWMnU4RFRpUjI1Z0h5Q0VEWVFJREFRQUJvMkV3Clh6QU9CZ05WSFE4QkFmOEVCQU1DQXFRd0hRWURWUjBsQkJZd0ZBWUlLd1lCQlFVSEF3RUdDQ3NHQVFVRkJ3TUMKTUE4R0ExVWRFd0VCL3dRRk1BTUJBZjh3SFFZRFZSME9CQllFRk11Nmh2c1VvSDlVbUI1cTRxYkM0NnEzTGRMdQpNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUFndjMyaEN3eU9IUzl2ZVFsVjcvejdTd2hJS0N0TmJwZ1ZBbm1SCkNQN2lEbG1NT2YzNzlLcXhXZXkrL3V0eGFBVDZzakloaU5tckZ3SE5vVVdqajlCdjZVMG9XQzFYRHh6cGZBQlQKSWZIdHBMdUgzeExhOThTNkY4RXoyVFpwNkh5ZDcvcHhRSW1CSXdJZ2VuT3JBeTZjdVJTUmpRdFhZcTNvLzBXeApNOEMvZ1pTdkNnNTYyMmNvVVdIbnVhVmRuLzNiSi9QL0lrbVltWDJzTjY2QlIzaTcwQk8va3hlR2xRTWxxaXFJCmZMUmszYS9LaC80dnBJZGNmSTM4WGIraXdmalJ2Q1ZFUUFrZjhlZkR6SWZ6TDh5ajVNaytFNU9zZk1EODBZdVoKa2hHZDAwUU9DRFJDcFZpc2RSUW1iekZ2NkprZVlLeGhXemF1bFBIZ2wxSlJ6V2FJCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K"
    asserts:
      - matchSnapshot: {}
  - it: should use `tls.ca` value when provided
    set:
      tls:
        autoGenerated: false
        ca: |
          -----BEGIN CERTIFICATE-----
          MIIDIDCCAgigAwIBAgIRANR3YBydhgMaFH4HzGiKyOEwDQYJKoZIhvcNAQELBQAw
          GjEYMBYGA1UEAxMPcHAtcGFtLXByb3h5LWNhMB4XDTI1MDQyMTE2NDY1NFoXDTI2
          MDQyMTE2NDY1NFowGjEYMBYGA1UEAxMPcHAtcGFtLXByb3h5LWNhMIIBIjANBgkq
          hkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA96wp/MyDujuM/bNLChJ06F5irGUBKfBY
          yR17uGnpYW6PqiAB6gbn1O1pb5p4ey6w6HfSY6YzVnkq4JzWH3y5KnHsL3EuAh3m
          heqX2nRk0HPQM3oCnS4AUxz2DEaug2u45tcmoDVnRx45VfeVEvDz9gT0Tr9qJNUO
          p1Tb0+bKFVdoOTXTiJKcpMBLXKzslkr1R6+dEhpgb0RtEBfb7E6530Bx4oBbYj31
          sfTlLiHrGvwpOFiv5rjBzOjeyF4XU4yFAwvHKPpJ+VBq9iECVyOCKUv4HQV1x6xS
          twKG+bRWlsxPgS/5esu2SD3p6yNKL/vIod6gV2u8DTiR25gHyCEDYQIDAQABo2Ew
          XzAOBgNVHQ8BAf8EBAMCAqQwHQYDVR0lBBYwFAYIKwYBBQUHAwEGCCsGAQUFBwMC
          MA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFMu6hvsUoH9UmB5q4qbC46q3LdLu
          MA0GCSqGSIb3DQEBCwUAA4IBAQAgv32hCwyOHS9veQlV7/z7SwhIKCtNbpgVAnmR
          CP7iDlmMOf379KqxWey+/utxaAT6sjIhiNmrFwHNoUWjj9Bv6U0oWC1XDxzpfABT
          IfHtpLuH3xLa98S6F8Ez2TZp6Hyd7/pxQImBIwIgenOrAy6cuRSRjQtXYq3o/0Wx
          M8C/gZSvCg5622coUWHnuaVdn/3bJ/P/IkmYmX2sN66BR3i70BO/kxeGlQMlqiqI
          fLRk3a/Kh/4vpIdcfI38Xb+iwfjRvCVEQAkf8efDzIfzL8yj5Mk+E5OsfMD80YuZ
          khGd00QOCDRCpVisdRQmbzFv6JkeYKxhWzaulPHgl1JRzWaI
          -----END CERTIFICATE-----
    asserts:
      - matchSnapshot: {}
  - it: should show auto-generated CA on first run
    set:
      tls:
        autoGenerated: true
    asserts:
      - matchRegexRaw:
          pattern: "-----END CERTIFICATE-----\n\n$"
  - it: should show previously generated CA when the alternative names have not changed
    set:
      tls:
        autoGenerated: true
    kubernetesProvider:
      # Mock previously generated secret
      scheme:
        "v1/Secret":
          gvr:
            version: "v1"
            resource: "secrets"
          namespaced: true
      objects:
        - kind: Secret
          apiVersion: v1
          type: kubernetes.io/tls
          metadata:
            name: RELEASE-NAME-kubernetes-access-gateway-tls
            namespace: NAMESPACE
            annotations:
              # sha256 hash of "[]-[]-" (no custom DNS names or resource alias is provided)
              checksum/alternativeNames: eee78e4712e57977935ceb9ebfdb354aa33c85ca4dbb490001827f64259b6b8d
          data:
            ca.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURJRENDQWdpZ0F3SUJBZ0lSQU5SM1lCeWRoZ01hRkg0SHpHaUt5T0V3RFFZSktvWklodmNOQVFFTEJRQXcKR2pFWU1CWUdBMVVFQXhNUGNIQXRjR0Z0TFhCeWIzaDVMV05oTUI0WERUSTFNRFF5TVRFMk5EWTFORm9YRFRJMgpNRFF5TVRFMk5EWTFORm93R2pFWU1CWUdBMVVFQXhNUGNIQXRjR0Z0TFhCeWIzaDVMV05oTUlJQklqQU5CZ2txCmhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBOTZ3cC9NeUR1anVNL2JOTENoSjA2RjVpckdVQktmQlkKeVIxN3VHbnBZVzZQcWlBQjZnYm4xTzFwYjVwNGV5Nnc2SGZTWTZZelZua3E0SnpXSDN5NUtuSHNMM0V1QWgzbQpoZXFYMm5SazBIUFFNM29DblM0QVV4ejJERWF1ZzJ1NDV0Y21vRFZuUng0NVZmZVZFdkR6OWdUMFRyOXFKTlVPCnAxVGIwK2JLRlZkb09UWFRpSktjcE1CTFhLenNsa3IxUjYrZEVocGdiMFJ0RUJmYjdFNjUzMEJ4NG9CYllqMzEKc2ZUbExpSHJHdndwT0ZpdjVyakJ6T2pleUY0WFU0eUZBd3ZIS1BwSitWQnE5aUVDVnlPQ0tVdjRIUVYxeDZ4Uwp0d0tHK2JSV2xzeFBnUy81ZXN1MlNEM3A2eU5LTC92SW9kNmdWMnU4RFRpUjI1Z0h5Q0VEWVFJREFRQUJvMkV3Clh6QU9CZ05WSFE4QkFmOEVCQU1DQXFRd0hRWURWUjBsQkJZd0ZBWUlLd1lCQlFVSEF3RUdDQ3NHQVFVRkJ3TUMKTUE4R0ExVWRFd0VCL3dRRk1BTUJBZjh3SFFZRFZSME9CQllFRk11Nmh2c1VvSDlVbUI1cTRxYkM0NnEzTGRMdQpNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUFndjMyaEN3eU9IUzl2ZVFsVjcvejdTd2hJS0N0TmJwZ1ZBbm1SCkNQN2lEbG1NT2YzNzlLcXhXZXkrL3V0eGFBVDZzakloaU5tckZ3SE5vVVdqajlCdjZVMG9XQzFYRHh6cGZBQlQKSWZIdHBMdUgzeExhOThTNkY4RXoyVFpwNkh5ZDcvcHhRSW1CSXdJZ2VuT3JBeTZjdVJTUmpRdFhZcTNvLzBXeApNOEMvZ1pTdkNnNTYyMmNvVVdIbnVhVmRuLzNiSi9QL0lrbVltWDJzTjY2QlIzaTcwQk8va3hlR2xRTWxxaXFJCmZMUmszYS9LaC80dnBJZGNmSTM4WGIraXdmalJ2Q1ZFUUFrZjhlZkR6SWZ6TDh5ajVNaytFNU9zZk1EODBZdVoKa2hHZDAwUU9DRFJDcFZpc2RSUW1iekZ2NkprZVlLeGhXemF1bFBIZ2wxSlJ6V2FJCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K"
    asserts:
      - matchSnapshot: {}
  - it: should show new generated CA when the alternative names have changed
    set:
      tls:
        autoGenerated: true
        dnsNames:
          - my-cluster.int
    kubernetesProvider:
      # Mock previously generated secret
      scheme:
        "v1/Secret":
          gvr:
            version: "v1"
            resource: "secrets"
          namespaced: true
      objects:
        - kind: Secret
          apiVersion: v1
          type: kubernetes.io/tls
          metadata:
            name: RELEASE-NAME-kubernetes-access-gateway-tls
            namespace: NAMESPACE
            annotations:
              # sha256 hash of "[]-[]-" (no custom DNS names or resource alias is provided)
              checksum/alternativeNames: eee78e4712e57977935ceb9ebfdb354aa33c85ca4dbb490001827f64259b6b8d
          data:
            ca.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURJRENDQWdpZ0F3SUJBZ0lSQU5SM1lCeWRoZ01hRkg0SHpHaUt5T0V3RFFZSktvWklodmNOQVFFTEJRQXcKR2pFWU1CWUdBMVVFQXhNUGNIQXRjR0Z0TFhCeWIzaDVMV05oTUI0WERUSTFNRFF5TVRFMk5EWTFORm9YRFRJMgpNRFF5TVRFMk5EWTFORm93R2pFWU1CWUdBMVVFQXhNUGNIQXRjR0Z0TFhCeWIzaDVMV05oTUlJQklqQU5CZ2txCmhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBOTZ3cC9NeUR1anVNL2JOTENoSjA2RjVpckdVQktmQlkKeVIxN3VHbnBZVzZQcWlBQjZnYm4xTzFwYjVwNGV5Nnc2SGZTWTZZelZua3E0SnpXSDN5NUtuSHNMM0V1QWgzbQpoZXFYMm5SazBIUFFNM29DblM0QVV4ejJERWF1ZzJ1NDV0Y21vRFZuUng0NVZmZVZFdkR6OWdUMFRyOXFKTlVPCnAxVGIwK2JLRlZkb09UWFRpSktjcE1CTFhLenNsa3IxUjYrZEVocGdiMFJ0RUJmYjdFNjUzMEJ4NG9CYllqMzEKc2ZUbExpSHJHdndwT0ZpdjVyakJ6T2pleUY0WFU0eUZBd3ZIS1BwSitWQnE5aUVDVnlPQ0tVdjRIUVYxeDZ4Uwp0d0tHK2JSV2xzeFBnUy81ZXN1MlNEM3A2eU5LTC92SW9kNmdWMnU4RFRpUjI1Z0h5Q0VEWVFJREFRQUJvMkV3Clh6QU9CZ05WSFE4QkFmOEVCQU1DQXFRd0hRWURWUjBsQkJZd0ZBWUlLd1lCQlFVSEF3RUdDQ3NHQVFVRkJ3TUMKTUE4R0ExVWRFd0VCL3dRRk1BTUJBZjh3SFFZRFZSME9CQllFRk11Nmh2c1VvSDlVbUI1cTRxYkM0NnEzTGRMdQpNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUFndjMyaEN3eU9IUzl2ZVFsVjcvejdTd2hJS0N0TmJwZ1ZBbm1SCkNQN2lEbG1NT2YzNzlLcXhXZXkrL3V0eGFBVDZzakloaU5tckZ3SE5vVVdqajlCdjZVMG9XQzFYRHh6cGZBQlQKSWZIdHBMdUgzeExhOThTNkY4RXoyVFpwNkh5ZDcvcHhRSW1CSXdJZ2VuT3JBeTZjdVJTUmpRdFhZcTNvLzBXeApNOEMvZ1pTdkNnNTYyMmNvVVdIbnVhVmRuLzNiSi9QL0lrbVltWDJzTjY2QlIzaTcwQk8va3hlR2xRTWxxaXFJCmZMUmszYS9LaC80dnBJZGNmSTM4WGIraXdmalJ2Q1ZFUUFrZjhlZkR6SWZ6TDh5ajVNaytFNU9zZk1EODBZdVoKa2hHZDAwUU9DRFJDcFZpc2RSUW1iekZ2NkprZVlLeGhXemF1bFBIZ2wxSlJ6V2FJCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K"
    asserts:
      - notMatchRegexRaw:
          # The regex matches the content of the existing CA cert in `data/ca.crt`, with `+` characters being escaped.
          pattern: |-
            -----BEGIN CERTIFICATE-----
            MIIDIDCCAgigAwIBAgIRANR3YBydhgMaFH4HzGiKyOEwDQYJKoZIhvcNAQELBQAw
            GjEYMBYGA1UEAxMPcHAtcGFtLXByb3h5LWNhMB4XDTI1MDQyMTE2NDY1NFoXDTI2
            MDQyMTE2NDY1NFowGjEYMBYGA1UEAxMPcHAtcGFtLXByb3h5LWNhMIIBIjANBgkq
            hkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA96wp/MyDujuM/bNLChJ06F5irGUBKfBY
            yR17uGnpYW6PqiAB6gbn1O1pb5p4ey6w6HfSY6YzVnkq4JzWH3y5KnHsL3EuAh3m
            heqX2nRk0HPQM3oCnS4AUxz2DEaug2u45tcmoDVnRx45VfeVEvDz9gT0Tr9qJNUO
            p1Tb0\+bKFVdoOTXTiJKcpMBLXKzslkr1R6\+dEhpgb0RtEBfb7E6530Bx4oBbYj31
            sfTlLiHrGvwpOFiv5rjBzOjeyF4XU4yFAwvHKPpJ\+VBq9iECVyOCKUv4HQV1x6xS
            twKG\+bRWlsxPgS/5esu2SD3p6yNKL/vIod6gV2u8DTiR25gHyCEDYQIDAQABo2Ew
            XzAOBgNVHQ8BAf8EBAMCAqQwHQYDVR0lBBYwFAYIKwYBBQUHAwEGCCsGAQUFBwMC
            MA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFMu6hvsUoH9UmB5q4qbC46q3LdLu
            MA0GCSqGSIb3DQEBCwUAA4IBAQAgv32hCwyOHS9veQlV7/z7SwhIKCtNbpgVAnmR
            CP7iDlmMOf379KqxWey\+/utxaAT6sjIhiNmrFwHNoUWjj9Bv6U0oWC1XDxzpfABT
            IfHtpLuH3xLa98S6F8Ez2TZp6Hyd7/pxQImBIwIgenOrAy6cuRSRjQtXYq3o/0Wx
            M8C/gZSvCg5622coUWHnuaVdn/3bJ/P/IkmYmX2sN66BR3i70BO/kxeGlQMlqiqI
            fLRk3a/Kh/4vpIdcfI38Xb\+iwfjRvCVEQAkf8efDzIfzL8yj5Mk\+E5OsfMD80YuZ
            khGd00QOCDRCpVisdRQmbzFv6JkeYKxhWzaulPHgl1JRzWaI
            -----END CERTIFICATE-----\n\n$
