{{- $checksumAnnotation := "checksum/alternativeNames" }}
{{- if eq .Values.tls.autoGenerated.engine "helm" }}
{{- if not .Values.tls.existingSecret }}
{{- $secretName := include "gateway.tlsSecretName" . }}
{{- $existingSecret := lookup "v1" "Secret" .Release.Namespace $secretName }}
{{- $resourceAlias := include "gateway.resourceAlias" . }}
{{- $alternativeNamesHash := include "gateway.alternativeNamesHash" . }}
{{- $existingAlternativeNamesHash := include "gateway.existingAlternativeNamesHash" . }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ $secretName }}
  {{- if .Values.tls.autoGenerated.enabled }}
  annotations:
    {{ $checksumAnnotation }}: {{ $alternativeNamesHash }}
  {{- end }}
type: kubernetes.io/tls
data:
  {{- if .Values.tls.autoGenerated.enabled }}
  {{- if and $existingSecret.data (eq $existingAlternativeNamesHash $alternativeNamesHash) }}
  # Reuse existing secret if its alternative names do not change
  tls.crt: {{ get $existingSecret.data "tls.crt" }}
  tls.key: {{ get $existingSecret.data "tls.key" }}
  ca.crt: {{ get $existingSecret.data "ca.crt" }}
  {{- else }}
  {{- $serviceName := include "gateway.fullname" . }}
  {{- include "gateway.generateCA" .}}
  {{- $ca := .Values._generatedCA }}
  {{- $dnsNames := concat .Values.tls.dnsNames (list "kubernetes" "kubernetes.default" "kubernetes.default.svc" (printf "kubernetes.default.svc.%s" .Values.clusterDomain)) (list $resourceAlias) }}
  {{- $tls := genSignedCert $serviceName .Values.tls.ipAddresses $dnsNames 365 $ca }}
  tls.crt: {{ $tls.Cert | b64enc }}
  tls.key: {{ $tls.Key | b64enc }}
  ca.crt: {{ $ca.Cert | b64enc }}
  {{- end }}
  {{- else }}
  tls.crt: {{ required "A valid .Values.tls.cert entry required!" .Values.tls.cert | b64enc }}
  tls.key: {{ required "A valid .Values.tls.key entry required!" .Values.tls.key | b64enc }}
  ca.crt: {{ required "A valid .Values.tls.ca entry required!" .Values.tls.ca | b64enc }}
  {{- end }}
{{- end }}
{{- end }}
